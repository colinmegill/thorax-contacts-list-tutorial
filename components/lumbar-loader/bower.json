{
  "name": "lumbar-loader",
  "version": "1.1.2",
  "main": [
    "lumbar-loader.js",
    "lumbar-loader-standard.js"
  ],
  "ignore": [
    "**/.*",
    "node_modules",
    "components",
    "test"
  ],
  "readme": "# Lumbar Module Loader\n\n[![Build Status](https://secure.travis-ci.org/walmartlabs/lumbar-loader.png?branch=master)](http://travis-ci.org/walmartlabs/lumbar-loader)\n\n## What is it?\nThe Module Loader is responsible for dynamically loading all module resources.\n\nWhile not required to use [lumbar](https://github.com/walmartlabs/lumbar), multiple client-side library\nhave been developed to facilitate loading both javascript and css assets for a given module. Each has\ntheir own advantages and performance ramifications. The ideal method depends very much on the environment\nthat is in use.\n\nRegardless of the library used, both support the same features and may be augmented with additional\nmixins to provide additional functionality.\n\n * Provides optional blocking behavior to prevent FOUCing\n * Conditional loading based on device pixel density\n * Support for inlined module css (See the **inline-styles** plugin)\n\n\n## How does it work?\nThe Module Loader can be initiated manually or automatically using a\nfeature mixin (discussed later).\n\nFor manual initiation:\n\n    Loader.loader.loadModule('base', function() {\n      Application.init();\n    });\n\n\n## Installing a Module Loader\n\nFor the most part, the module loader is just standard javascript that\nis included in the module scripts section.  The only exception is\n*topLevelName* which is discussed later.\n\nYou must include the core module loader script and the module loader\nimpl script.  The following example assumes that you have copied the\nmodule loader scripts to your own application lib directory.\n\n    {\n      \"modules\": {\n        \"base\": {\n          \"scripts\": [\n            ...\n            \"lib/lumbar-loader.js\",\n            \"lib/lumbar-loader-{implementation}.js\",\n            {\"module-map\": true}\n          ]\n        }\n      }\n    }\n\n## Module Loader Implementations\n\n### Standard Loader\n\nScript: *lib/lumbar-loader-standard.js*\n\nThe standard loader provides generic module loading utilizing tag\ninjection and normal browser caching.\n\nThis is ideal for development environments as well as environments\nwhose mobile users are a lesser percentage of the user base.\n\nDependencies: `{\"src\": \"lib/script.js\", \"global\": true}`\n\n\n### Local Storage Loader\n\nScript: *lib/lumbar-loader-localstorage.js*\n\nThe local storage loader provides an additional caching layer on top\nof the core browser caching techniques. Under some environments,\nparticularly mobile, this may prove useful as the normal browser\ncaching routines may be limited due to device restrictions.\n\nThis technique does have some drawbacks in that it limits resource\nusage to resources available on the local domain only (or exposed via\nCORS in supporting environments) and it creates a bit of pain when\nattempting to debug as resources must be manually evicted from the\n**localStorage** cache to test changes.\n\nDependencies: `{\"src\": \"lib/local-cache.js\", \"global\": true}`\n\n\n#### Loader Module\n\nFor larger applications is is recommended that a separate loader module is used to\nminimize the content size that is not cacheable. This can be done using the\n`topLevelName` attribute on the given module.\n\nThis will set the Loader as a global variable with the name provided\nas *topLevelName*.\n\n*lumbar.json*:\n\n    {\n      \"modules\": {\n        \"loader\": {\n          \"topLevelName\": \"Loader\",\n          \"scripts\": [\n            ...\n            \"lib/lumbar-loader.js\",\n            \"lib/lumbar-loader-{implementation}.js\",\n            {\"module-map\": true},\n            \"js/load.js\"\n          ]\n        },\n        \"base\": {\n          ...\n        }\n      }\n    }\n\n*js/load.js*:\n\n    Loader.loader.loadModule('base', function() {\n      Application.init();\n    });\n\nWhere the base module implements the `Application` module and exports an initializer\nnamed `init`.\n\n## Feature Mixins\n\n### Backbone Route Loader\n\nThe backbone loader mixin, *lumbar-loader-backbone.js* adds the ability to automatically load a\nmodule when any of it's associated route is routed in backbone.\n\nThis plugin must be loading after both the core loader logic and backbone itself have been loaded\nalthough it is not required that it is declared in the same module as either. If not defined after\nthe **module-map** and all other dependencies then it must be explicitly initialized using the\n`initBackboneLoader`. This call should occur prior to any modules that implement those routes\nbeing loaded.\n\nIf the loader module is a module other than the one that the mixin is loaded in then a reference to\nthe loader module must be passed into the `initBackboneLoader` call. For example if loading the\napplication module explicitly:\n\n    Loader.loader.loadModule('base', function() {\n      Application.initBackboneLoader(Loader);\n    });\n\n\n### Module Load Events Mixin\n\nThe load events mixin, *lumbar-loader-events.js*, adds backbone events to the load process. If\nloaded after backbone this mixin will automatically initialize itself, otherwise `loader.initEvents`\nmust be explicitly called after backbone has been loaded.\n\nThis mixin adds the following backbone events to the loader object:\n\n * `load:start` : Emitted at the start of a module load. The module name is passed as the first parameter.\n * `load:end` : Emitted after all resources have been loaded for a given module. The module name is passed as the first parameter.\n\n\n### Module Load Performance Mixin\n\n## Testing\n\nThe loader can be tested using phantom js via `npm test`. This assumes that `phantomjs` is available on\nthe current path and that `npm start` server is running in the background.\n\nReal browser testing can be done by running `npm start` and hitting `http://localhost:8083/index-standard.html`\nand `http://localhost:8083/index-local.html` directly in the browser.\n\n## Supported Browsers\n\nThe core loader functionality is supported on iOS 4+, Android 2+, Chrome, Firefox, Safari 4+, IE 8+.\nFeature mixins such as the performance logger may require polyfills, or may operate with reduced\nfeature sets on some supported browsers.\n\nNote that prior versions of IE, back to IE6, can be supported by reworking the duplicate prevention\nroutines in `checkLoaderResources` to utilizes methods other than `querySelector`.\n\n",
  "readmeFilename": "README.md",
  "gitHead": "e8c91f97631bdea9970fd4b8ae3f19c75db55da9",
  "_id": "lumbar-loader@1.1.2",
  "description": "[![Build Status](https://secure.travis-ci.org/walmartlabs/lumbar-loader.png?branch=master)](http://travis-ci.org/walmartlabs/lumbar-loader)",
  "repository": {
    "type": "git",
    "url": "git://github.com/walmartlabs/lumbar-loader.git"
  }
}